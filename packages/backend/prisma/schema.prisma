generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  role          Role      @default(READER)
  posts         Post[]
  comments      Comment[]
  likes         PostLike[]
  drafts        Draft[]
  reactions     Reaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  ADMIN
  AUTHOR
  READER
}

model Post {
  id            String      @id @default(cuid())
  slug          String      @unique
  title         String
  content       String
  published     Boolean     @default(false)
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  likes         PostLike[]
  tags          PostTag[]
  reactions     Reaction[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
  parentId  String?
}

model PostLike {
  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId String
  createdAt DateTime @default(now())
  @@id([userId, postId])
}

model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  posts PostTag[]
}

model PostTag {
  post   Post @relation(fields: [postId], references: [id])
  postId String
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  String
  @@id([postId, tagId])
}

model Draft {
  id        String   @id @default(cuid())
  postId    String?  @unique
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Reaction {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      ReactionType
  createdAt DateTime @default(now())
  @@unique([postId, userId, type])
}

enum ReactionType {
  LIKE
  LOVE
  CLAP
  WOW
}

// Index suggestions
// Use partial indexes via direct SQL if needed for published posts
